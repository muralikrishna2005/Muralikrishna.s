# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jzZXeRBzxdZPMl3RxwVhohjgnr22AWpB
"""

# ✅ Credit Card Fraud Detection - Phase 2 (Simplified)
# Author: Mohan Kumar.K
# Register No: 422023104025

# 📦 Step 1: Install required libraries (if not already installed)
!pip install -q imbalanced-learn xgboost

# 📥 Step 2: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

from imblearn.over_sampling import SMOTE
# 📂 Step 3: Upload your dataset
from google.colab import files
uploaded = files.upload()

# Make sure to upload "amt (1).csv"
# 📊 Step 4: Load and Preview Dataset
df = pd.read_csv("amt (1).csv")
print("Original shape:", df.shape)
df.head()
# 🧹 Step 5: Preprocessing
df.drop_duplicates(inplace=True)
df['Log_Amount'] = np.log1p(df['Amount'])

scaler = StandardScaler()
df['Scaled_Amount'] = scaler.fit_transform(df[['Amount']])
df['Scaled_Time'] = scaler.fit_transform(df[['Time']])
df.drop(['Time', 'Amount'], axis=1, inplace=True)
# ⚖️ Step 6: Handle Imbalance with SMOTE
X = df.drop('Class', axis=1)
y = df['Class']

smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X, y)

print("After SMOTE:\n", y_res.value_counts())
# 🎯 Step 7: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X_res, y_res, test_size=0.3, random_state=42, stratify=y_res)
# 🤖 Step 8: Model Training & Evaluation
models = {
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'Random Forest': RandomForestClassifier(),
    'XGBoost': XGBClassifier(use_label_encoder=False, eval_metric='logloss')
}

for name, model in models.items():
    print(f"\n🔍 Model: {name}")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:, 1]

    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("ROC AUC Score:", roc_auc_score(y_test, y_prob))
# 📊 Step 9: Class Distribution Plot
sns.countplot(x='Class', data=df)
plt.title("Class Distribution (Before SMOTE)")
plt.show()
# 📈 Step 10: ROC Curve - Random Forest
rf = RandomForestClassifier()
rf.fit(X_train, y_train)
y_scores = rf.predict_proba(X_test)[:, 1]

fpr, tpr, _ = roc_curve(y_test, y_scores)
plt.plot(fpr, tpr, label="Random Forest")
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()